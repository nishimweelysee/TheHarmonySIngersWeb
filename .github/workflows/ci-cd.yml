name: Laravel THS CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SERVER_HOST: 158.220.121.106
  SERVER_USER: root
  DEPLOY_PATH: /opt/docker-compose/laravel_ths

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql, pgsql
          coverage: none
          
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
        
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        
      - name: Generate key
        run: php artisan key:generate
        
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
        
      - name: Create Database
        run: |
          mkdir -p /tmp/forge
          touch /tmp/forge/database.sqlite
          
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: /tmp/forge/database.sqlite
        run: php artisan test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Server
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to Server
        run: |
          # Update code on server
          echo "üì• Updating code on server..."
          rsync -av --progress --exclude='node_modules/' --exclude='.next/' --exclude='.git/' --exclude='*.log' --exclude='target/' --exclude='vendor/' ./ root@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
          
          # Connect to server and deploy
          ssh root@${{ env.SERVER_HOST }} << 'REMOTE_SCRIPT'
          set -e
          
          echo "üîß Starting server deployment..."
          cd ${{ env.DEPLOY_PATH }}
          
          # Backup current deployment
          echo "üíæ Creating backup..."
          BACKUP_DIR="/opt/backups/laravel-ths-$(date +%Y%m%d_%H%M%S)"
          mkdir -p $BACKUP_DIR
          cp -r . $BACKUP_DIR/ 2>/dev/null || true
          
          # Update environment files with server IP
          echo "üîß Updating environment files..."
          find . -name "*.env*" -type f -exec sed -i 's/localhost/158.220.121.106/g' {} \;
          find . -name "*.env*" -type f -exec sed -i 's/203.161.58.38/158.220.121.106/g' {} \;
          
          # Build and deploy service
          echo "üèóÔ∏è Building and deploying service..."
          cd /opt/docker-compose
          
          # Stop and rebuild Laravel THS
          docker-compose stop laravel_ths || true
          docker-compose build --no-cache laravel_ths
          docker-compose up -d laravel_ths
          
          # Wait for service to be healthy
          echo "‚è≥ Waiting for service to be healthy..."
          sleep 30
          
          # Check service health
          echo "üîç Checking service health..."
          docker-compose ps laravel_ths
          
          # Test endpoint
          echo "üß™ Testing endpoint..."
          curl -f http://localhost:8000 > /dev/null && echo "‚úÖ Laravel THS: OK" || echo "‚ùå Laravel THS: FAILED"
          
          echo "üéâ Laravel THS deployment completed successfully!"
          REMOTE_SCRIPT
          
      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üéâ Laravel THS deployment successful!"
          else
            echo "‚ùå Laravel THS deployment failed!"
          fi
